# Generated by Django 4.2.14 on 2025-08-09 16:42

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Lunchbox',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='A friendly name for the lunchbox', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Optional description of the lunchbox')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this lunchbox is currently active')),
                ('device_api_key', models.CharField(default=uuid.uuid4, help_text='API key devices use to authenticate when pushing sensor data', max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(help_text='User who owns this lunchbox', on_delete=django.db.models.deletion.CASCADE, related_name='lunchboxes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Lunchboxes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SensorReading',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sensor_type', models.CharField(choices=[('temp', 'Temperature'), ('humi', 'Humidity'), ('gas', 'Gas Level')], help_text='Type of sensor reading', max_length=4)),
                ('value', models.FloatField(help_text='The sensor reading value')),
                ('unit', models.CharField(help_text='Unit of measurement (e.g., Â°C, %, ppm)', max_length=10)),
                ('recorded_at', models.DateTimeField(help_text='When the reading was taken')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('lunchbox', models.ForeignKey(help_text='The lunchbox this reading belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='sensor_readings', to='monitoring.lunchbox')),
            ],
            options={
                'ordering': ['-recorded_at'],
                'indexes': [models.Index(fields=['lunchbox', 'sensor_type', 'recorded_at'], name='monitoring__lunchbo_b802e7_idx')],
            },
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(choices=[('temp_high', 'Temperature Too High'), ('temp_low', 'Temperature Too Low'), ('humi_high', 'High Humidity'), ('gas_high', 'High Gas Level'), ('batt_low', 'Low Battery')], help_text='Type of alert', max_length=20)),
                ('severity', models.CharField(choices=[('critical', 'Critical'), ('warning', 'Warning'), ('info', 'Information')], default='warning', help_text='Severity level of the alert', max_length=10)),
                ('message', models.TextField(help_text='Detailed alert message')),
                ('is_resolved', models.BooleanField(default=False, help_text='Whether the alert has been resolved')),
                ('resolved_at', models.DateTimeField(blank=True, help_text='When the alert was resolved', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('lunchbox', models.ForeignKey(help_text='The lunchbox this alert is for', on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='monitoring.lunchbox')),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['lunchbox', 'is_resolved', 'created_at'], name='monitoring__lunchbo_51c60b_idx')],
            },
        ),
    ]
